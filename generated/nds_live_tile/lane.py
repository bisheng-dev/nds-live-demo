# Automatically generated by Zserio Python generator version 1.0.4 using Zserio core 2.16.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

class Lane:
    def __init__(
            self,
            id_: int = int(),
            coordinates_: typing.List[float] = None,
            type_: str = str()) -> None:
        self._id_ = id_
        self._coordinates_ = zserio.array.Array(zserio.array.Float64ArrayTraits(), coordinates_, is_auto=True)
        self._type_ = type_

    @classmethod
    def from_reader(
            cls: typing.Type['Lane'],
            zserio_reader: zserio.BitStreamReader) -> 'Lane':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Lane):
            return ((self._id_ == other._id_) and
                    (self._coordinates_ == other._coordinates_) and
                    (self._type_ == other._type_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._id_)
        result = zserio.hashcode.calc_hashcode_object(result, self._coordinates_)
        result = zserio.hashcode.calc_hashcode_string(result, self._type_)

        return result

    @property
    def id(self) -> int:
        return self._id_

    @id.setter
    def id(self, id_: int) -> None:
        self._id_ = id_

    @property
    def coordinates(self) -> typing.List[float]:
        return self._coordinates_.raw_array

    @coordinates.setter
    def coordinates(self, coordinates_: typing.List[float]) -> None:
        self._coordinates_ = zserio.array.Array(zserio.array.Float64ArrayTraits(), coordinates_, is_auto=True)

    @property
    def type(self) -> str:
        return self._type_

    @type.setter
    def type(self, type_: str) -> None:
        self._type_ = type_

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 32
        end_bitposition += self._coordinates_.bitsizeof(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._type_)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 32
        end_bitposition = self._coordinates_.initialize_offsets(end_bitposition)
        end_bitposition += zserio.bitsizeof.bitsizeof_string(self._type_)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._id_ = zserio_reader.read_bits(32)
        self._coordinates_ = zserio.array.Array.from_reader(zserio.array.Float64ArrayTraits(), zserio_reader, is_auto=True)
        self._type_ = zserio_reader.read_string()

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bits(self._id_, 32)
        self._coordinates_.write(zserio_writer)
        zserio_writer.write_string(self._type_)
