# Automatically generated by Zserio Python generator version 1.0.4 using Zserio core 2.16.0.
# Generator setup: writerCode, pubsubCode, serviceCode, sqlCode

from __future__ import annotations

import typing
import zserio

import nds_live_tile.lane

class Tile:
    def __init__(
            self,
            level_: int = int(),
            morton_code_: int = int(),
            lanes_: typing.List[nds_live_tile.lane.Lane] = None) -> None:
        self._level_ = level_
        self._morton_code_ = morton_code_
        self._lanes_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lanes()), lanes_, is_auto=True)

    @classmethod
    def from_reader(
            cls: typing.Type['Tile'],
            zserio_reader: zserio.BitStreamReader) -> 'Tile':
        self = object.__new__(cls)

        self.read(zserio_reader)

        return self

    def __eq__(self, other: object) -> bool:
        if isinstance(other, Tile):
            return ((self._level_ == other._level_) and
                    (self._morton_code_ == other._morton_code_) and
                    (self._lanes_ == other._lanes_))

        return False

    def __hash__(self) -> int:
        result = zserio.hashcode.HASH_SEED
        result = zserio.hashcode.calc_hashcode_int32(result, self._level_)
        result = zserio.hashcode.calc_hashcode_int64(result, self._morton_code_)
        result = zserio.hashcode.calc_hashcode_object(result, self._lanes_)

        return result

    @property
    def level(self) -> int:
        return self._level_

    @level.setter
    def level(self, level_: int) -> None:
        self._level_ = level_

    @property
    def morton_code(self) -> int:
        return self._morton_code_

    @morton_code.setter
    def morton_code(self, morton_code_: int) -> None:
        self._morton_code_ = morton_code_

    @property
    def lanes(self) -> typing.List[nds_live_tile.lane.Lane]:
        return self._lanes_.raw_array

    @lanes.setter
    def lanes(self, lanes_: typing.List[nds_live_tile.lane.Lane]) -> None:
        self._lanes_ = zserio.array.Array(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lanes()), lanes_, is_auto=True)

    def bitsizeof(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 16
        end_bitposition += 64
        end_bitposition += self._lanes_.bitsizeof(end_bitposition)

        return end_bitposition - bitposition

    def initialize_offsets(self, bitposition: int = 0) -> int:
        end_bitposition = bitposition
        end_bitposition += 16
        end_bitposition += 64
        end_bitposition = self._lanes_.initialize_offsets(end_bitposition)

        return end_bitposition

    def read(self, zserio_reader: zserio.BitStreamReader) -> None:
        self._level_ = zserio_reader.read_bits(16)
        self._morton_code_ = zserio_reader.read_bits(64)
        self._lanes_ = zserio.array.Array.from_reader(zserio.array.ObjectArrayTraits(self._ZserioElementFactory_lanes()), zserio_reader, is_auto=True)

    def write(self, zserio_writer: zserio.BitStreamWriter) -> None:
        zserio_writer.write_bits(self._level_, 16)
        zserio_writer.write_bits(self._morton_code_, 64)
        self._lanes_.write(zserio_writer)

    class _ZserioElementFactory_lanes:
        IS_OBJECT_PACKABLE = False

        @staticmethod
        def create(zserio_reader: zserio.BitStreamReader, zserio_index: int) -> nds_live_tile.lane.Lane:
            del zserio_index
            return nds_live_tile.lane.Lane.from_reader(zserio_reader)
